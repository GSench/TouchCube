package grisha.support;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Environment;

public class FileManager {
    Activity act;
    PictureConversation pc;

    /**
     * ???????????
     * @param act ??????? ??????????
     */
    public FileManager(Activity act){
        this.act = act;
        pc=new PictureConversation(act);
    }

    /**
     * ????? ???????? ????? ??? ??????????
     * @param directory ???? ? ????? (??? ??????????) ? SD
     * @param file ??? ????? (??? ??????????) SD
     */
    public void deleteFileSd(String directory, String file){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return;
        }
        File sdPath = Environment.getExternalStorageDirectory();
        if(file.equals("")) sdPath = new File(sdPath.getAbsolutePath() + "/" + directory);
        else sdPath = new File(sdPath.getAbsolutePath() + "/" + directory+"/"+file);
        delete(sdPath);
    }

    /**
     * ????? ???????? ????? ??? ??????????
     * @param file ???? (??? ??????????)
     */
    public void delete(File file){
        if(!file.exists())
            return;
        if(file.isDirectory())
        {
            for(File f : file.listFiles())
                delete(f);
            file.delete();
        }
        else
        {
            file.delete();
        }
    }

    /**
     * ????? ?????????????? ????? ??? ??????????
     * @param oldFileName ?????? ??? ????? (?????? ? ?????????????)
     * @param newFileName ????? ??? ????? (?????? ? ?????????????)
     */
    public void renameFileSD(String oldFileName, String newFileName){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return;
        }
        File sdPath = Environment.getExternalStorageDirectory();
        File file1 = new File(sdPath.getAbsolutePath() + "/" + oldFileName);
        File file2 = new File(sdPath.getAbsolutePath() + "/" + newFileName);
        file1.renameTo(file2);
    }

    /**
     * ????? ?????? ?????????? ?????
     * @param file ???? ??? ??????
     * @param directory ???? ? ????? ? SD
     * @param fileName ??? ????? SD
     */
    public void writeTextSD(String file, String directory, String fileName) {
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return;
        }
        writeBytesSD(file.getBytes(), directory, fileName);
    }

    /**
     * ????? ?????? ???????????
     * @param pic ???? ??? ??????
     * @param format ?????? ???????????: 0 - PNG , 1 - JPEG , 2 - WEBP
     * @param directory ???? ? ????? ? SD
     * @param fileName ??? ????? SD
     */
    public void writePictureSD(Bitmap pic, int format, String directory, String fileName){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return;
        }
        writeBytesSD(pc.bitmapToByteArrray(pic, format), directory, fileName);
    }

    /**
     * ????? ?????? ????? ? ???? byte[]
     * @param file ???? ??? ??????
     * @param dir ???? ? ????? ? SD
     * @param filename ??? ????? SD
     */
    public void writeBytesSD(byte[] file, String dir, String filename){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
            return;
        File filePath = new File(Environment.getExternalStorageDirectory()+ "/" + dir);
        filePath.mkdirs();
        File fileSD = new File(Environment.getExternalStorageDirectory()+ "/" + dir+"/"+filename);
        BufferedOutputStream bos = null;
        try {
            bos = new BufferedOutputStream(new FileOutputStream(fileSD));
        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        try {
            bos.write(file);
            bos.flush();
            bos.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


    /**
     * ????? ?????? ?????????? ????? ? SD
     * @param directory ???? ? ????? ? SD
     * @param file ??? ????? SD
     * @return ???? ? ????????? ????, null ???? ?????? ????? ??? ??? ?? ???????? SD
     */
    public String readTextSD(String directory, String file) {
        byte[] get = readBytesSD(directory, file);
        if(get==null) return null;
        return new String(get);
    }

    /**
     * ????? ?????? ??????????? ? SD ??? ??????? ??????????? ????
     * @param filepath ?????????? ???? ? ?????
     * @return ???????????, null ???? ?????? ????? ??? ??? ?? ???????? SD
     */
    public Drawable readPictureAbs(String filepath){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
            return null;
        byte[] f = readBytesSDAbs(filepath);
        if(f==null) return null;
        return pc.byteArrayToDrawable(f);
    }

    /**
     * ????? ?????? ??????????? ? SD
     * @param dir ???? ? ????? ? SD
     * @param filename ??? ????? SD
     * @return ???? ? ????, null ???? ?????? ????? ??? ??? ?? ???????? SD
     */
    public Drawable readPicture(String dir, String filename){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
            return null;
        return readPictureAbs(Environment.getExternalStorageDirectory()+ "/" + dir+"/"+filename);
    }

    /**
     * ????? ?????? ????? ? SD
     * @param dir ???? ? ????? ? SD
     * @param filename ??? ????? SD
     * @return ???? ? ???? byte[], null ???? ?????? ????? ??? ??? ?? ???????? SD
     */
    public byte[] readBytesSD(String dir, String filename){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
            return null;
        return readBytesSDAbs(Environment.getExternalStorageDirectory()+ "/" + dir+"/"+filename);
    }

    /**
     * ????? ?????? ????? ? SD ??? ??????? ??????????? ????
     * @param filepath ?????????? ???? ? ?????
     * @return ???? ? ???? byte[], null ???? ?????? ????? ??? ??? ?? ???????? SD
     */
    public byte[] readBytesSDAbs(String filepath){
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
            return null;
        File file = new File(filepath);
        if(!file.exists()) return null;
        int size = (int) file.length();
        byte[] bytes = new byte[size];
        try {
            BufferedInputStream buf = new BufferedInputStream(new FileInputStream(file));
            buf.read(bytes, 0, bytes.length);
            buf.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return bytes;
    }

    /**
     * ????? ?????? ????? ? SD ??? ??????? uri
     * @param filepath uri ?????
     * @return ???? ? ???? byte[], null ???? ?????? ????? ??? ??? ?? ???????? SD
     */
    public byte[] readBytesSDAbs(Uri filepath){
        InputStream inputStream = null;
        try {
            inputStream = act.getContentResolver().openInputStream(filepath);
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream();

        // this is storage overwritten on each iteration with bytes
        int bufferSize = 1024;
        byte[] buffer = new byte[bufferSize];

        // we need to know how may bytes were read to write them to the byteBuffer
        int len = 0;
        try {
            while ((len = inputStream.read(buffer)) != -1) {
                byteBuffer.write(buffer, 0, len);
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        // and then we can return your byte array.
        return byteBuffer.toByteArray();
    }

}